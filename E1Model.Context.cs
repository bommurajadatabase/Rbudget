//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace E1
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class EEntities : DbContext
    {
        public EEntities()
            : base("name=EEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<DbInfoName> DbInfoNames { get; set; }
        public virtual DbSet<DbInfoPeriod> DbInfoPeriods { get; set; }
        public virtual DbSet<DbInfoType> DbInfoTypes { get; set; }
        public virtual DbSet<Branch> Branches { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<CustomerAddress> CustomerAddresses { get; set; }
        public virtual DbSet<CustomerBank> CustomerBanks { get; set; }
        public virtual DbSet<Leader> Leaders { get; set; }
        public virtual DbSet<Loan> Loans { get; set; }
        public virtual DbSet<LoanCard> LoanCards { get; set; }
        public virtual DbSet<LoanDocument> LoanDocuments { get; set; }
        public virtual DbSet<RepaymentType> RepaymentTypes { get; set; }
        public virtual DbSet<Branch_B> Branch_B { get; set; }
        public virtual DbSet<Customer_B> Customer_B { get; set; }
        public virtual DbSet<CustomerAddress_B> CustomerAddress_B { get; set; }
        public virtual DbSet<CustomerBank_B> CustomerBank_B { get; set; }
        public virtual DbSet<Loan_B> Loan_B { get; set; }
        public virtual DbSet<LoanCard_B> LoanCard_B { get; set; }
        public virtual DbSet<LoanDocuments_B> LoanDocuments_B { get; set; }
        public virtual DbSet<RepaymentType_B> RepaymentType_B { get; set; }
        public virtual DbSet<DbInfoStatu> DbInfoStatus { get; set; }
    
        public virtual ObjectResult<SP_TodayCollectionDetails_Result> SP_TodayCollectionDetails(Nullable<System.DateTime> plannedCollectionDate, string branchName)
        {
            var plannedCollectionDateParameter = plannedCollectionDate.HasValue ?
                new ObjectParameter("PlannedCollectionDate", plannedCollectionDate) :
                new ObjectParameter("PlannedCollectionDate", typeof(System.DateTime));
    
            var branchNameParameter = branchName != null ?
                new ObjectParameter("BranchName", branchName) :
                new ObjectParameter("BranchName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_TodayCollectionDetails_Result>("SP_TodayCollectionDetails", plannedCollectionDateParameter, branchNameParameter);
        }
    
        public virtual ObjectResult<SP_WeekCollectionDetails_Result> SP_WeekCollectionDetails(Nullable<System.DateTime> plannedCollectionDate, string branchName)
        {
            var plannedCollectionDateParameter = plannedCollectionDate.HasValue ?
                new ObjectParameter("PlannedCollectionDate", plannedCollectionDate) :
                new ObjectParameter("PlannedCollectionDate", typeof(System.DateTime));
    
            var branchNameParameter = branchName != null ?
                new ObjectParameter("BranchName", branchName) :
                new ObjectParameter("BranchName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_WeekCollectionDetails_Result>("SP_WeekCollectionDetails", plannedCollectionDateParameter, branchNameParameter);
        }
    
        public virtual ObjectResult<SP_WeeklyReport_Result> SP_WeeklyReport(Nullable<System.DateTime> reportFromDate, Nullable<System.DateTime> reportToDate)
        {
            var reportFromDateParameter = reportFromDate.HasValue ?
                new ObjectParameter("ReportFromDate", reportFromDate) :
                new ObjectParameter("ReportFromDate", typeof(System.DateTime));
    
            var reportToDateParameter = reportToDate.HasValue ?
                new ObjectParameter("ReportToDate", reportToDate) :
                new ObjectParameter("ReportToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_WeeklyReport_Result>("SP_WeeklyReport", reportFromDateParameter, reportToDateParameter);
        }
    
        public virtual ObjectResult<SP_WeeklyReport_Result> FunctionWeeklyReport(Nullable<System.DateTime> reportFromDate, Nullable<System.DateTime> reportToDate)
        {
            var reportFromDateParameter = reportFromDate.HasValue ?
                new ObjectParameter("ReportFromDate", reportFromDate) :
                new ObjectParameter("ReportFromDate", typeof(System.DateTime));
    
            var reportToDateParameter = reportToDate.HasValue ?
                new ObjectParameter("ReportToDate", reportToDate) :
                new ObjectParameter("ReportToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_WeeklyReport_Result>("FunctionWeeklyReport", reportFromDateParameter, reportToDateParameter);
        }
    
        public virtual ObjectResult<SP_WeeklyReport_Branch_Result> FunctionWeeklyReportBranch(Nullable<System.DateTime> reportFromDate, Nullable<System.DateTime> reportToDate)
        {
            var reportFromDateParameter = reportFromDate.HasValue ?
                new ObjectParameter("ReportFromDate", reportFromDate) :
                new ObjectParameter("ReportFromDate", typeof(System.DateTime));
    
            var reportToDateParameter = reportToDate.HasValue ?
                new ObjectParameter("ReportToDate", reportToDate) :
                new ObjectParameter("ReportToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_WeeklyReport_Branch_Result>("FunctionWeeklyReportBranch", reportFromDateParameter, reportToDateParameter);
        }
    
        public virtual ObjectResult<SP_WeeklyReport_Backup08Oct_Result> SP_WeeklyReport_Backup08Oct(Nullable<System.DateTime> reportFromDate, Nullable<System.DateTime> reportToDate)
        {
            var reportFromDateParameter = reportFromDate.HasValue ?
                new ObjectParameter("ReportFromDate", reportFromDate) :
                new ObjectParameter("ReportFromDate", typeof(System.DateTime));
    
            var reportToDateParameter = reportToDate.HasValue ?
                new ObjectParameter("ReportToDate", reportToDate) :
                new ObjectParameter("ReportToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_WeeklyReport_Backup08Oct_Result>("SP_WeeklyReport_Backup08Oct", reportFromDateParameter, reportToDateParameter);
        }
    
        public virtual int SP_WeeklyReport_Branch(Nullable<System.DateTime> reportFromDate, Nullable<System.DateTime> reportToDate)
        {
            var reportFromDateParameter = reportFromDate.HasValue ?
                new ObjectParameter("ReportFromDate", reportFromDate) :
                new ObjectParameter("ReportFromDate", typeof(System.DateTime));
    
            var reportToDateParameter = reportToDate.HasValue ?
                new ObjectParameter("ReportToDate", reportToDate) :
                new ObjectParameter("ReportToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_WeeklyReport_Branch", reportFromDateParameter, reportToDateParameter);
        }
    }
}
